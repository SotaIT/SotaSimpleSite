function SotaTreeNode(id, pid, text, url, title, target, icon, tree, load, noselect)
{
	this.id = id;
	this.pid = pid;
	this.text = text ? text : 'ID: ' + id;
	this.url = url;
	this.title = title;
	this.target = target;
	this.icon = icon;
	this._isOpen = false;			this.nodes = [];		this.tree = tree;		this._index = -1;		this.load =  load || false;		this._level = -1;		this._nodesLoaded = false;		this.noSelect =  noselect || false;}

function SotaTree(clientID)
{
	this.config = 	{		useSelection			: true,		useIcons				: true,		loadOnes				: true	}	this.icon = 	{
		root				: 'img/globe.gif',
		folder			    : 'img/folder.gif',
		folderOpen	        : 'img/folderopen.gif',
		node				: 'img/page.gif',
		empty				: 'img/empty.gif',
		line				: 'img/line.gif',
		join				: 'img/join.gif',
		joinBottom	        : 'img/joinbottom.gif',
		plus				: 'img/plus.gif',
		plusBottom	        : 'img/plusbottom.gif',
		minus				: 'img/minus.gif',
		minusBottom	        : 'img/minusbottom.gif'
	};
	this.clientID = clientID;	this.root = new SotaTreeNode('-1');
	this.root.tree = this;
	this.nodesByID = {};
	this.nodesByID[-1] = this.root;
	this.onClick = null;	this.loadNodes = null;	this.selectedNode = null;}

SotaTree.prototype.add = function(id, pid, text, url, title, target, icon, load) {	var pnode = this.nodesByID[pid];	if(pnode)	{		var node = new SotaTreeNode(id, pid, text, url, title, target, icon, this, load);		this.nodesByID[id] = node;		var i = pnode.nodes.length;		pnode.nodes[i] = node;		node._index = i;		node._level = pnode._level + 1;		return node;	}}SotaTree.prototype.toString = function(){	return 	'<div id="' + this.clientID + '_div">'			+ this.root.toString() 			+ '</div>';}SotaTree.prototype.reDraw = function(){	if(this._div)	{}	else	{		this._div = document.getElementById(this.clientID + '_div');	}	this._div.innerHTML = this.root.toString();}SotaTreeNode.prototype.getPath = function(){	if(this.id == '-1')	{		return [];	}	var arr = this.parentNode().getPath();	arr[arr.length] = this.id;	return arr;}SotaTreeNode.prototype.getLi = function(){	if(this._li)	{}	else	{		this._li = document.getElementById(this.tree.clientID + '_li_' + this.id);	}	return this._li;}SotaTreeNode.prototype.getImg = function(){	if(this._img)	{}	else	{		this._img = document.getElementById(this.tree.clientID + '_img_' + this.id);	}	return this._img;}SotaTreeNode.prototype.getLiChild = function(tagName){	if(this['_li_'+tagName])	{}	else	{		this['_li_'+tagName] = this.getLi().getElementsByTagName(tagName)[0];	}	return this['_li_'+tagName];}SotaTreeNode.prototype.getUl = function(){	return this.getLiChild('ul');}SotaTreeNode.prototype.getA = function(){	return this.getLiChild('a');}SotaTreeNode.prototype.toString = function(){	var str = '';	if(this.id != '-1')	{		str += '<li id="' + this.tree.clientID + '_li_' + this.id + '">';		var level = this._level;		if(level == 0)		{			if(this.tree.config.useIcons && this.tree.icon.root)			{				str += '<img src="' + 					this.tree.icon.root 					+ '" />';			}		}		else		{			var p = this.parentNode();			var indent = '';			for(var i = 1; i < level; i++)			{				indent = '<img src="' + 					(p.isLast() ? this.tree.icon.empty : this.tree.icon.line) + 					'" />' + indent;					p = p.parentNode();			}			str += indent;			str += '<img style="cursor:pointer" src="' + 			(this.nodes.length > 0 || this.load				? ((this.isLast() 					? this.tree.icon.plusBottom 					: this.tree.icon.plus)					+ '"  id="' + this.tree.clientID + '_img_' + this.id 					+ '" onclick="' + this.tree.clientID + '.open(\'' + this.id + '\',this);')				: (this.isLast() 					? this.tree.icon.joinBottom 					: this.tree.icon.join))				+ '" />';				if(this.tree.config.useIcons)			{				str += '<img src="' + 					(this.icon ? this.icon : (this.nodes.length > 0  || this.load ? this.tree.icon.folder : this.tree.icon.node))					+ '" />';			}				}		str += '<a style="cursor:pointer" title="' + (this.title ? this.title : this.text) + 		'" onclick="' + this.tree.clientID + '.click(\'' + this.id + '\');"' +		(this.url ? ' href="' + this.url + '"' : '') + '>' 			+ this.text + '</a>';	}	if(this.nodes.length > 0  || this.load)	{		str += '<ul' + (this._level > 0 ? ' style="display:none"' : '' ) + '>';		for(var i = 0; i < this.nodes.length; i++)		{			str += this.nodes[i].toString();		}		str += '</ul>';	}	if(this.id != '-1')	{		str += '</li>';	}	return str;}SotaTreeNode.prototype.isLast = function(){	return this._index == this.parentNode().nodes.length - 1;}SotaTreeNode.prototype.parentNode = function(){	return this.tree.nodesByID[this.pid];}SotaTree.prototype.open = function(id){	var node = this.nodesByID[id];	var li = node.getLi();	var img = node.getImg();	var ul = node.getUl();	if(node._isOpen)	{		ul.style.display = 'none';		img.src = img.src.replace('minus','plus');	}	else	{		ul.style.display = '';		img.src = img.src.replace('plus','minus');		if(this.loadNodes)		{			this.loadNodeData(node, ul);		}	}	node._isOpen = !node._isOpen;}SotaTree.prototype.openAll = function(){	for(var n in this.nodesByID)	{		var node = this.nodesByID[n];		if(node)			if(document.getElementById(this.clientID + '_img_' + node.id)) 				if(!node._isOpen && node._nodesLoaded)				{					this.open(node.id);				}	}}SotaTree.prototype.closeAll = function(){	for(var n in this.nodesByID)	{		var node = this.nodesByID[n];		if(node)			if(document.getElementById(this.clientID + '_img_' + node.id)) 				if(node._isOpen)				{					this.open(node.id);				}	}}SotaTree.prototype.loadNodeData = function(pnode, ul){	if(!(this.config.loadOnes && pnode._nodesLoaded))	{		for(var i = 0; i < pnode.nodes.length; i++)		{			this.nodesByID[pnode.nodes[i].id] = null;		}		pnode.nodes = [];		var nodes = this.loadNodes(pnode);		for(var i = 0; i < nodes.length; i++)		{			var node = nodes[i];			this.nodesByID[node.id] = node;			var j = pnode.nodes.length;			pnode.nodes[j] = node;			node._index = j;			node.tree = this;			node.pid = pnode.id;			node._level = pnode._level + 1;		}		var str = '';		for(var i = 0; i < pnode.nodes.length; i++)		{			str += pnode.nodes[i].toString();		}		ul.innerHTML = str;		pnode._nodesLoaded = true;	}}SotaTree.prototype.appendNode = function(node){	this.nodesByID[node.id] = node;	var pnode = this.nodesByID[node.pid];	var j = pnode.nodes.length;	pnode.nodes[j] = node;	node._index = j;	node.tree = this;	node._level = pnode._level + 1;	var str = '';	for(var i = 0; i < pnode.nodes.length; i++)	{		str += pnode.nodes[i].toString();	}	pnode.getUl().innerHTML = str;}SotaTree.prototype.select = function(id){	this.selectNode(this.nodesByID[id]);}SotaTree.prototype.selectNode = function(node){	if(node.noSelect)	{		return;	}	if(this.selectedNode)	{		this.selectedNode.getA().className = '';	}	node.getA().className = 'selected';	this.selectedNode = node;}SotaTree.prototype.click = function(id){	if(this.config.useSelection)	{		this.selectNode(this.nodesByID[id]);	}	if(this.onClick)	{		this.onClick(this.nodesByID[id]);	}}